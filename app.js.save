//MODULS DE NODE
var express = require('express');
var app = express();
var bodyParser = require("body-parser");
var request = require('request');
var mongoose = require("mongoose");
var port = 8080;
var moment = require("moment");
var moment = require('moment-timezone');
moment().tz("Europe/Madrid").format();
const Telegraf = require('telegraf');
const bot = new Telegraf("550843373:AAGA-YrH4sdso1tL-6hfS9UAFDJ7V72sMA4");
var schedule = require('node-schedule');

//CODES NECESSARIES DIVERSES
app.set("view engine", "ejs");
app.use(express.static("public"));
app.use(bodyParser.urlencoded({
  extended: true
}));
//CONNEXIÓ DB
mongoose.connect("mongodb://localhost/dispenser")
var weekschema = require("./models/weekschema", function(err) {});
var pill = require("./models/pill", function(err) {});
var pillday = require("./models/pillday", function(err) {});
var savedip = require("./models/savedip", function(err) {});
var nowpill = require("./models/nowpill", function(err) {});


//FUNCIÓ ENVIAR DADES A arduino
function sendData(steps, ip) {
  ip1 = "http://" + String(ip[3]) + "/girar/20";
  console.log(ip1);
  const req = request(ip1, function(err, resp, body) {
    req.end();
  });
}

app.get("/horari", function(req, res) {

  res.render("schedule.ejs");

})
app.get("/index", function(req, res) {
  bot.telegram.sendMessage("@pilldispenser", "hola");

  res.render("index.ejs");

})

app.post("/add/schema", function(req, res) {
  weekschema.remove().exec();
  var variable;
  variable = req.body;

  weekschema.create({
    1: variable[1],
    2: variable[2],
    3: variable[3],
    4: variable[4],
    5: variable[5],
    6: variable[6],
    7: variable[7]
  }, function(err, docs) {
    if (docs) {
      console.log(docs);
    } else {
      console.log(err);
    }
  });

  res.redirect("../index");
})

app.get("/home", function(req, res) {
  weekschema.findOne({}, function(err, docs) {
    var hour = moment().hour() + 2;
    var wday = moment().isoWeekday();
    console.log("dsadsa");
    console.log(wday);

    //CANVIEM ANTERIORS
    pillday.findOneAndUpdate({
      edited: false
    }, {
      $set: {
        edited: true
      }
    }, function(err, doc) {
      if (err) {
        console.log("Something wrong when updating data!");
      }

      console.log("editats antics");
    });
    // console.log(docs[date]);
    docs[wday].hour.forEach(function(element) {
      if (hour == element) {
        console.log("Es hora de la pastilla");
        pillday.create({
          time: hour
        }, function(err, docs) {
          if (docs) {
            console.log("actual:");
            console.log(docs);
bot.telegram.sendMessage("@pilldispenser","Pastillaaa");
          }
        });
      }
    })
  })
});


app.get("/arduino", function(req, res) {

  ip = req.ip.split(":");

  savedip.create({
    ip: ip[3]
  })
  savedip.findOne({}, function(err, docs) {
    console.log(docs);
  })
  var hour = moment().hour() + 2;

  pillday.findOneAndUpdate({
    "edited": false
  }, {
    "$set": {
      "edited": true,
      "taken": true
    }
  }, function(err, docs) {
    console.log(docs);
  });
  // pill.create({time});

});

app.get("/resum",function(req,res){
  pillday.find({},function(err,docs){
    res.render("resum.ejs",{docs:docs});
  })
})
//EXECUCIÓ HORARI CADA Hora
var j = schedule.scheduleJob({
  minute: 0
}, function() {
  console.log('Time for tea!');
  weekschema.findOne({}, function(err, docs) {
    var hour = moment().hour() + 2;
    var wday = moment().isoWeekday();
6    console.log(hour);

    //CANVIEM ANTERIORS
    pillday.findOneAndUpdate({
      edited: false
    }, {
      $set: {
        edited: true
      }
    }, function(err, doc) {
      if (err) {
        console.log("Something wrong when updating data!");
      }

      console.log("editats antics");
    });
    // console.log(docs[date]);
    docs[wday].hour.forEach(function(element) {
      if (hour == element) {
        console.log("Es hora de la pastilla");
        pillday.create({
          time: hour
        }, function(err, docs) {
          if (docs) {
            console.log("actual:");
            console.log(docs);
          }
        });
      }
    })
  })
});






app.listen(80, function() {
  console.log("server is running");
});
