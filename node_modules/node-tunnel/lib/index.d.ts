/// <reference types="node" />
/// <reference types="bluebird" />
import * as Promise from 'bluebird';
import { EventEmitter } from 'events';
import * as http from 'http';
import * as net from 'net';
export declare type NetConnectPromise = (port: number, hostname: string, cltSocket: net.Socket, req: Request) => Promise<net.Socket>;
export declare class Request extends http.IncomingMessage {
    auth?: {
        username?: string;
        password?: string;
    };
}
export declare class Tunnel extends EventEmitter {
    private server;
    private middleware;
    constructor();
    connect(port: number, host: string, _cltSocket: net.Socket, _req: Request): Promise<net.Socket>;
    use: (middleware: Middleware) => void;
    listen: (port: number | string, callback?: (err: any, result?: any) => void) => this;
    close: (callback?: (error?: Error) => void) => this;
}
export declare const createTunnel: () => Tunnel;
export declare type Middleware = (req: Request, cltSocket: net.Socket, head: Buffer, next: () => void) => void;
export declare const basicAuth: Middleware;
